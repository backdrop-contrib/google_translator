<?php

/**
 * @file
 */

define('GOOGLE_TRANSLATOR_DISCLAIMER_CLASS', 'google-translator-switch');
define('GOOGLE_TRANSLATOR_ELEMENT_ID', 'google_translator_element');

/**
 * Implements hook_menu().
 */
function google_translator_menu() {
  $items = array();

  $items['admin/config/regional/google-translate'] = array(
    'title' => t('Google Translate'),
    'description' => t('Google translate option settings'),
    'access arguments' => array('administer site configuration'),
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('google_translator_settings_page'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['<google-translate>'] = array(
    'page callback' => 'backdrop_not_found',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_preprocess_menu_link().
 */
function google_translator_preprocess_menu_link(&$vars, $hook) {
  if ($vars['element']['#href'] == '<google-translate>') {
    $vars['element']['#href'] = '#';
    $vars['element']['#attributes']['class'][] = GOOGLE_TRANSLATOR_DISCLAIMER_CLASS;
    $vars['element']['#localized_options']['external'] = TRUE;
    $vars['element']['#localized_options']['attributes']['class'][] = GOOGLE_TRANSLATOR_DISCLAIMER_CLASS;
    _google_translator_build();
  }
}

/**
 * Module configuration settings page.
 */
function google_translator_settings_page() {
  $config = config('google_translator.settings');
  $form['#config'] = 'google_translator.settings';
  $modes = array(
    'SIMPLE' => t('Simple'),
    'HORIZONTAL' => t('Horizontal'),
    'VERTICAL' => t('Vertical'),
  );
  $form['active_languages_display_mode'] = array(
    '#type' => 'radios',
    '#title' => t('Display Mode'),
    '#description' => t('Simple is the most compact setting.<br>Horizontal will display "Powered by Google" text next to the language selector.<br>Vertical will display "Powered by Google" text beneath the language selector.'),
    '#options' => $modes,
    '#default_value' => $config->get('active_languages_display_mode'),
  );

  $form['gt_active_languages'] = array(
    '#type' => 'details',
    '#summary' => t('Languages configuration. Configure the languages available to your site.'),
    '#open' => FALSE,
  );

  $form['gt_active_languages']['active_languages'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Available Languages'),
    '#options' => google_translator_get_available_languages(),
    '#description' => t('Please select specific languages.'),
    '#default_value' => $config->get('active_languages'),
  );
  $form['disclaimer'] = array(
    '#type' => 'details',
    '#summary' => t('Service disclaimer (optional)'),
    '#open' => TRUE,
  );
  $form['disclaimer']['add_disclaimer'] = array(
    '#type' => 'checkbox',
    '#title' => t('Add service disclaimer'),
    '#description' => t('Optionally require users to accept a disclaimer (in a popup modal on click) before allowing translation. '),
    '#default_value' => $config->get('add_disclaimer'),
  );
  $form['disclaimer']['disclaimer_title'] = array(
    '#title' => t('Service disclaimer title'),
    '#type' => 'textfield',
    '#description' => t('Title for the modal.'),
    '#default_value' => $config->get('disclaimer_title'),
    '#states' => array(
      'visible' => array(
        ':input[name="add_disclaimer"]' => array('checked' => TRUE),
      ),
    ),
  );
  $form['disclaimer']['disclaimer_text'] = array('#title' => t('Service disclaimer text'),
    '#type' => 'textarea',
    '#description' => t('Enter the text of the disclaimer here.<br>
    Allowed tags: @tags', [
      '@tags' => implode(', ', _filter_xss_allowed_tags()),
    ]),
    '#default_value' => $config->get('disclaimer_text'),
    '#states' => array(
      'visible' => array(
        ':input[name="add_disclaimer"]' => array('checked' => TRUE),
      ),
    ),
  );
  $form['#attached']['css'][] = backdrop_get_path('module', 'google_translator') . '/css/settings_form.css';

  $form = system_settings_form($form);
  return $form;
}


/**
 * Implements hook_block_info().
 */
function google_translator_block_info() {
  return array(
    'active_languages' => array(
      'info' => t('Google Translator language selector'),
      'cache' => BACKDROP_NO_CACHE,
    ),
  );
}

/**
 * Implements hook_block_view().
 */
function google_translator_block_view($delta = '') {
  return array(
    'subject' => '',
    'content' => array(
      '#theme' => 'google_translator_language_selector',
    ),
  );
}

/**
 * Implements hook_theme().
 */
function google_translator_theme() {
  return array(
    'google_translator_language_selector' => array(
      'render element' => 'element',
    ),
  );
}

/**
 * returns HTML for the block, and injects CSS and JS
 */
function theme_google_translator_language_selector($vars) {
  _google_translator_build();
  $link_attributes = array('class' => array(GOOGLE_TRANSLATOR_DISCLAIMER_CLASS, 'notranslate'));
  $items = array();
  if (config_get('google_translator.settings', 'add_disclaimer')) {
    $items[] = l(t('Translate this page'), '#', array('attributes' => $link_attributes));
  }
  else {
    // No disclaimer needed. Add the script directly.
    $items[] = google_translator_get_script();;
  }
  return implode("\n", $items);
}


/**
 * Builds the script from the translator API.
 */
function google_translator_get_script() {
  backdrop_add_library('system', 'backdrop.dialog.ajax');
  $config = config('google_translator.settings');
  $default = '';
  $active_languages = google_translator_get_active_languages();

  if (!empty($active_languages)) {
    // Build the render array that will print the Google Translate widget.
    $callback = 'Backdrop.behaviors.googleTranslatorElement.init';
    $default .= '<span id="' . GOOGLE_TRANSLATOR_ELEMENT_ID . '"></span>';
    $default .= '<script type="text/javascript" src="//translate.google.com/translate_a/element.js?cb=' . $callback . '"></script>';
  }
  else {
    watchdog('google_translator', t('Specify some languages in the <a href=":url">Google Translator settings</a> to enable translation.', [
      ':url' => '/admin/config/regional/google-translator',
    ]));
    $default = t('No languages available for translation.');
  }
  return $default;
}

/**
 * Build the Google translator.
 */
function _google_translator_build() {
  global $language;
  $config = config('google_translator.settings');
  $langcode = $language->langcode;
  $display_mode = $config->get('active_languages_display_mode');
  $active_languages = google_translator_get_active_languages();
  $settings = array(
    'googleTranslatorDisclaimer' => array(
      'addDisclaimer' => $config->get('add_disclaimer'),
      'disclaimerText' => filter_xss($config->get('disclaimer_text')),
      'disclaimerTitle' => filter_xss($config->get('disclaimer_title')),
      'selector' => '.' . GOOGLE_TRANSLATOR_DISCLAIMER_CLASS,
      'acceptText' => t('Accept'),
      'dontAcceptText' => t('Do Not Accept'),
      'element' => google_translator_get_script(),
    ),
    'googleTranslatorElement' => [
      'id' => GOOGLE_TRANSLATOR_ELEMENT_ID,
      'langcode' => $langcode,
      'languages' => implode(',', $active_languages),
      'displayMode' => $display_mode ?: 'SIMPLE',
    ],
  );
  backdrop_add_js($settings, 'setting');
  backdrop_add_js(backdrop_get_path('module', 'google_translator') . '/js/init.js', 'file', array('defer' => TRUE));
  backdrop_add_css(backdrop_get_path('module', 'google_translator') . '/css/google_translator.css', 'file');
  if ($config->get('add_disclaimer')) {
    backdrop_add_js(backdrop_get_path('module', 'google_translator') . '/js/disclaimer.js', 'file', array('defer' => TRUE));
  }
}

/**
 *  Get active languages.
 */
function google_translator_get_active_languages() {
  $active_languages = config_get('google_translator.settings', 'active_languages');
  if (is_array($active_languages)) {
    $active_languages = array_flip($active_languages);
    if (isset($active_languages[0])) {
      unset($active_languages[0]);
    }
  }
  else {
    $active_languages = [];
  }
  return $active_languages;
}

/**
 *  Get available languages.
 */
function google_translator_get_available_languages() {
  return [
    'af' => 'Afrikaans',
    'sq' => 'Albanian',
    'am' => 'Amharic',
    'ar' => 'Arabic',
    'hy' => 'Armenian',
    'az' => 'Azerbaijani',
    'eu' => 'Basque',
    'be' => 'Belarusian',
    'bn' => 'Bengali',
    'bs' => 'Bosnian',
    'bg' => 'Bulgarian',
    'ca' => 'Catalan',
    'ny' => 'Chichewa',
    'zh-CN' => 'Chinese (Simplified)',
    'zh-TW' => 'Chinese (Traditional)',
    'co' => 'Corsican',
    'hr' => 'Croatian',
    'cs' => 'Czech',
    'da' => 'Danish',
    'nl' => 'Dutch',
    'en' => 'English',
    'eo' => 'Esperanto',
    'et' => 'Estonian',
    'ee' => 'Ewe',
    'tl' => 'Filipino',
    'fi' => 'Finnish',
    'fr' => 'French',
    'fy' => 'Frisian',
    'gl' => 'Galician',
    'ka' => 'Georgian',
    'de' => 'German',
    'el' => 'Greek',
    'gn' => 'Guarani',
    'gu' => 'Gujarati',
    'ht' => 'Haitian Creole',
    'ha' => 'Hausa',
    'haw' => 'Hawaiian',
    'iw' => 'Hebrew',
    'hi' => 'Hindi',
    'hmn' => 'Hmong',
    'hu' => 'Hungarian',
    'is' => 'Icelandic',
    'ig' => 'Igbo',
    'id' => 'Indonesian',
    'ga' => 'Irish',
    'it' => 'Italian',
    'ja' => 'Japanese',
    'jw' => 'Javanese',
    'kn' => 'Kannada',
    'kk' => 'Kazakh',
    'km' => 'Khmer',
    'rw' => 'Kinyarwanda',
    'ko' => 'Korean',
    'kri' => 'Krio',
    'ku' => 'Kurdish (Kurmanji)',
    'ckb' => 'Kurdish (SoranÃ®)',
    'ky' => 'Kyrgyz',
    'lo' => 'Lao',
    'lv' => 'Latvian',
    'ln' => 'Lingala',
    'lt' => 'Lithuanian',
    'lg' => 'Luganda',
    'mk' => 'Macedonian',
    'mg' => 'Malagasy',
    'ms' => 'Malay',
    'ml' => 'Malayalam',
    'mt' => 'Maltese',
    'mi' => 'Maori',
    'mr' => 'Marathi',
    'mn' => 'Mongolian',
    'ne' => 'Nepali',
    'no' => 'Norwegian',
    'or' => 'Odia (Oriya)',
    'om' => 'Oromo',
    'ps' => 'Pashto',
    'fa' => 'Persian',
    'pl' => 'Polish',
    'pt' => 'Portuguese',
    'pa' => 'Punjabi',
    'qu' => 'Quechua',
    'ro' => 'Romanian',
    'ru' => 'Russian',
    'gd' => 'Scots Gaelic',
    'sr' => 'Serbian',
    'st' => 'Sesotho',
    'sn' => 'Shona',
    'sd' => 'Sindhi',
    'si' => 'Sinhala',
    'sk' => 'Slovak',
    'sl' => 'Slovenian',
    'so' => 'Somali',
    'es' => 'Spanish',
    'su' => 'Sundanese',
    'sw' => 'Swahili',
    'sv' => 'Swedish',
    'tg' => 'Tajik',
    'ta' => 'Tamil',
    'tt' => 'Tatar',
    'te' => 'Telugu',
    'th' => 'Thai',
    'ti' => 'Tigrinya',
    'tr' => 'Turkish',
    'tk' => 'Turkmen',
    'ug' => 'Uyghur',
    'uk' => 'Ukrainian',
    'ur' => 'Urdu',
    'uz' => 'Uzbek',
    'vi' => 'Vietnamese',
    'cy' => 'Welsh',
    'xh' => 'Xhosa',
    'yi' => 'Yiddish',
    'yo' => 'Yoruba',
    'zu' => 'Zulu',
  ];
}
